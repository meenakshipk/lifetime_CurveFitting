/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lifetime_curvefitting;

import ij.ImagePlus;
import ij.gui.Plot;
import ij.gui.PlotWindow;
import ij.measure.CurveFitter;
import ij.process.FloatProcessor;
import ij.process.ImageProcessor;
import java.awt.List;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.apache.commons.lang3.ArrayUtils;

/**
 *
 * @author Meenakshi P. created on 20191021
 *
 * currently working on writing code to fit data to analytic function. this is
 * NOT the code for uploading a set of images with wxh resolution, performing
 * fitting on each pixel to obtain the lifetime image. *
 */
public class lifetime extends javax.swing.JFrame {

    /**
     * Creates new form lifetime
     */
    public lifetime() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldXRes = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldYRes = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButtonUploadFile = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldTimePoints = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Image resolution:");

        jTextFieldXRes.setText("1024");

        jLabel2.setText("by");

        jTextFieldYRes.setText("1024");

        jLabel3.setText("Repetition rate of laser:");

        jTextField3.setText("80");

        jLabel4.setText("MHz");

        jLabel5.setText("Select file:");

        jButtonUploadFile.setText("Upload");
        jButtonUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUploadFileActionPerformed(evt);
            }
        });

        jButton1.setText("Upload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Upload text file with xdata, ydata - 14 points");

        jLabel7.setText("No. of files/data points:");

        jTextFieldTimePoints.setText("25");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jButtonUploadFile)
                    .addComponent(jButton1)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldTimePoints))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldXRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldYRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addContainerGap(174, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldXRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldYRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldTimePoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUploadFile)
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUploadFileActionPerformed
        //choose multiple files
        JFileChooser Fc = new JFileChooser();
        Fc.showOpenDialog(this);
        File f = Fc.getSelectedFile();

        //for testing - file 14 datapoints
        double[] xdata = new double[14];
        double[] ydata = new double[14];

        //read file and store xdata and ydata
        String dataString = "";
        int c = 0;
        float xData = 0;
        float yData = 0;
        FileReader fReader = null;
        File curFile = f;
        if (curFile.exists()) {

            try {
                fReader = new FileReader(curFile);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(lifetime.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                int count = 0;
                while ((c = fReader.read()) != -1) {
                    switch (c) {
                        case '\t':
                            xData = Float.parseFloat(dataString);
                            xdata[count] = xData;
                            dataString = "";
                            break;
                        case '\n':
                            yData = Float.parseFloat(dataString);
                            ydata[count] = yData;
                            count = count + 1;
                            dataString = "";
                            break;
                        default:
                            dataString += (char) c;
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(lifetime.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //find lowest yData to initialise parameter 1 for fitting
        double ydataMin = ydata[0];
        System.out.println("Before loop:" + ydataMin);
        for (int i = 0; i < ydata.length; i++) {
            if (ydata[i] < ydataMin) {
                ydataMin = ydata[i];
            }
        }
        System.out.println("After loop:" + ydataMin);

        //custom fit
        String eq = "y = a*((1+(c*(1-exp(-b*x))))*(1 + (1-exp(-b*x))))";
        CurveFitter cf = new CurveFitter(xdata, ydata); //select data and initialize curve fitter
        double[] initialParams = new double[3]; //initialise parameters for user-fn fit 
        initialParams[0] = ydataMin;
        initialParams[1] = 0.001;
        initialParams[2] = 0.05;
        cf.doCustomFit(eq, initialParams, false); //custom-fit
        double[] para = cf.getParams(); //get fit parameters
        double lifetime = 1 / para[1];
        Plot plot = cf.getPlot();
        PlotWindow show = plot.show();
        System.out.println(Arrays.toString(para)); //print fit parameters        
        System.out.println("Lifetime = " + lifetime + " ps"); //lifetime ydataMin
    }//GEN-LAST:event_jButtonUploadFileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int dataPoints = Integer.parseInt(jTextFieldTimePoints.getText());
        int xRes = Integer.parseInt(jTextFieldXRes.getText());
        int yRes = Integer.parseInt(jTextFieldYRes.getText());

        //choose multiple files
        JFileChooser Fc = new JFileChooser();
        Fc.setMultiSelectionEnabled(true);
        Fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        Fc.showOpenDialog(this);
        File[] dataFiles = Fc.getSelectedFiles();

        //read pixel intensity values and store in an arraylist
        ArrayList<float[][]> yDataArrayList = new ArrayList<>();
        for (File dataFile : dataFiles) {
            ImagePlus ip = new ImagePlus(dataFile.getAbsolutePath());
            ImageProcessor processor = ip.getProcessor();
            float[][] floatArray = processor.getFloatArray();
            yDataArrayList.add(floatArray);
        }

        //fitting
        //create xdata
//        double[] xdata = new double[dataPoints];
        double[] xdata = {0,
            33.33333,
            66.66667,
            100,
            133.33333,
            166.66667,
            200,
            233.33333,
            266.66667,
            300,
            333.33333,
            400,
            466.66667,
            533.33333,
            600,
            666.66667,
            800,
            933.33333,
            1066.66667,
            1200,
            1333.33333,
            1666.66667,
            2000,
            2666.66667,
            3333.33333};
        //initialise lifetimeImage float array
        float[][] lifetimeImg = new float[xRes][yRes];

        //looping over each pixel i.e. xRes*yRes
        //currently it looks like this code will take 728 days(? did i calculate that correctly. update: No. its 17h, see below)
        //to run 25 datapoints image resolution of 1024 by 1024
        //what should be done here?
        //basis of calculation was that one x dimension worth of line took
        //1578032802895 - 1578032742287 = 60608 ms = 60.6s to run
        //there are 1024 lines, i.e. 1024*60.6s = 62054.4s = 1034.24mins = 17.23h
        
        System.out.println("Timestamp: " + System.currentTimeMillis());
        for (int x = 0; x < xRes; x++) {
            System.out.println("Timestamp: " + System.currentTimeMillis());
            for (int y = 0; y < yRes; y++) {
                System.out.print("XY: " + ((x * yRes) + y) + "Data Point: ");
                //new ydata array
                double[] ydata = new double[dataPoints];
                //loop over all data points
                for (int p = 0; p < yDataArrayList.size(); p++) {
                    float[][] get = yDataArrayList.get(p);
                    ydata[p] = (double) get[x][y];
                    System.out.print(p + " ");
                }
                System.out.println(" ");
                //carry out fit for xdata and ydata and save fit result
                float result = (float) this.lifetimeFit(xdata, ydata);
                lifetimeImg[x][y] = result;
            }
        }
        System.out.println("Timestamp: " + System.currentTimeMillis());
        //image creation
        ImageProcessor ltIP = new FloatProcessor(xRes, yRes);
        ltIP.setFloatArray(lifetimeImg);
        ImagePlus liIMP = new ImagePlus("Lifetime image", ltIP);
        liIMP.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    public double lifetimeFit(double[] xdata, double[] ydata) {
        //custom fit
        String eq = "y = a*((1+(c*(1-exp(-b*x))))*(1 + (1-exp(-b*x))))";
        CurveFitter cf = new CurveFitter(xdata, ydata); //select data and initialize curve fitter
        double[] initialParams = new double[3]; //initialise parameters for user-fn fit 
        initialParams[0] = 1;
        initialParams[1] = 0.001;
        initialParams[2] = 0.05;
        cf.doCustomFit(eq, initialParams, false); //custom-fit
        double[] para = cf.getParams(); //get fit parameters
        double lifetime = 1 / para[1]; //calculate lifetime
        System.out.println(Arrays.toString(para)); //print fit parameters        
        System.out.println("Lifetime = " + lifetime + " ps");
        return lifetime;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(lifetime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(lifetime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(lifetime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(lifetime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new lifetime().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonUploadFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextFieldTimePoints;
    private javax.swing.JTextField jTextFieldXRes;
    private javax.swing.JTextField jTextFieldYRes;
    // End of variables declaration//GEN-END:variables
}
